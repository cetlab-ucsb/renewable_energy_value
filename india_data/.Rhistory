generator.data[fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE", "HYDRO-PUMPED", "HYDRO-STORAGE"), var_cost] <- 0
generator.data <- fread("generator.data.csv") # Generator data with capacity
generator.data <- left_join(generator.data, node.data)
print(paste0("Number of rows with no region association: ", nrow(generator.data[is.na(Region)])))
# Join generators with fuel
generator.data <- left_join(generator.data, gen.fuel.data)
print(paste0("Number of rows with no fuel association: ", nrow(generator.data[is.na(Fuel)])))
# Join generators with variable cost
generator.data <- left_join(generator.data, gen.var.cost)
print(paste0("Number of rows with no cost data association: ", nrow(generator.data[is.na(`VO&M Charge`)])))
# Join generators with ownership
generator.data <- left_join(generator.data, gen.ownership)
print(paste0("Number of rows with no ownership association: ", nrow(generator.data[is.na(owner_type)])))
# change column names"
setnames(generator.data, c("Generator", "Node", "Max Capacity", "VO&M Charge", "Fuel", "Min Stable Level", "Region", "Zone"), c("generator", "node", "gen_capacity", "var_cost", "fuel", "min_gen", "state", "region"))
# Mapping fuel with the type of generator as treated by the ED algorithm
generator.data <- left_join(generator.data, fuel.type.mapping)
# Change the cost of hydro to zero
generator.data[fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE", "HYDRO-PUMPED", "HYDRO-STORAGE"), var_cost] <- 0
# Generator types to exclude
fuel.to.exclude <- c("HYDRO-PUMPED", "WIND", "SOLAR-PV")
generator.data <- generator.data[!(fuel %in% fuel.to.exclude), ]
View(generator.data)
generator.data[fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE", "HYDRO-PUMPED", "HYDRO-STORAGE"), var_cost:= 0]
generator.data <- generator.data[fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE", "HYDRO-PUMPED", "HYDRO-STORAGE"), var_cost:= 0]
fuel.to.exclude <- c("HYDRO-PUMPED", "WIND", "SOLAR-PV")
generator.data <- generator.data[!(fuel %in% fuel.to.exclude), ]
# generator output for ED
cols.to.output <- c("generator", "gen_capacity", "var_cost", "type")
write.table(generator.data[,.SD, .SDcols = cols.to.output],file="../india_ED_input/gen_all_input.csv",sep=",",row.names=F)
min(generator.data[type = "coal",var_cost])
min(generator.data[type == "coal",var_cost])
min(generator.data[type == "gas",var_cost])
min(generator.data[fuel == "NUCLEAR",var_cost])
nrow(generator.data[fuel %in% c("HYDRO-STORAGE", "HYDRO-ROR", "HYDRO-PONDAGE", "HYDRO-PUMPED"),])
library(dplyr)
var_cost.mean <- generator.data %>%
group_by(fuel, state) %>%
dplyr::summarise(var_cost = mean(var_cost, na.rm=TRUE))
View(var_cost.mean)
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
getwd()
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
working.directory <- "G:/SWITCH/india_ED/india_data"
setwd(working.directory)
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
View(hydro.data)
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new][daily.GWh.new > 0, daily.max:= daily.max.new][daily.GWh.new > 0, daily.min:= daily.min.new]
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new]
hydro.data[daily.GWh.new > 0 & !(daily.max.new<=0), daily.max:= daily.max.new]
hydro.data[daily.GWh.new > 0 & !(daily.min.new<=0), daily.min:= daily.min.new]
## Use scada data if RLDC data <=0 and scada data >0
hydro.data[daily.GWh.new <= 0 & daily.GWh.scada > 0, daily.GWh:= daily.GWh.scada]
hydro.data[daily.GWh.new <= 0 & daily.GWh.scada > 0 & !(daily.max.scada <= 0), daily.max:= daily.max.scada]
hydro.data[daily.GWh.new <= 0 & daily.GWh.scada > 0 & !(daily.min.scada <= 0), daily.min:= daily.min.scada]
View(hydro.data)
nrow(hydro.data[daily.GWh == 0])
nrow(hydro.data)
sum(hydro.data[daily.GWh])
sum(hydro.data[,daily.GWh])
test <- hydro.data[`Max Capacity` >= 25,]
sum(test[,daily.GWh])
nrow(test[daily.GWh == 0])
test <- hydro.data[`Max Capacity` >= 50,]
sum(test[,daily.GWh])
nrow(test[daily.GWh == 0])
nrow(hydro.data[daily.GWh.new == 0])
nrow(hydro.data[daily.GWh.new =< 0])
nrow(hydro.data[daily.GWh.new <= 0])
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new]
nrow(hydro.data[daily.GWh.new <= 0])
hydro.data[daily.GWh.new > 0 & !(daily.max.new<=0), daily.max:= daily.max.new]
hydro.data[daily.GWh.new > 0 & !(daily.min.new<=0), daily.min:= daily.min.new]
nrow(hydro.data[daily.GWh.new <= 0])
hydro.data[daily.GWh.new <= 0 & daily.GWh.scada > 0, daily.GWh:= daily.GWh.scada]
nrow(hydro.data[daily.GWh.new <= 0])
nrow(hydro.data[daily.GWh <= 0])
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new]
nrow(hydro.data[daily.GWh <= 0])
test = hydro.data[daily.GWh <= 0,]
View(test)
test1 <- hydro.data[!(daily.GWh.new == 0),]
test1 <- test[!(daily.GWh.new == 0),]
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
nrow(hydro.data[daily.GWh <= 0])
nrow(hydro.data[daily.GWh.new <= 0])
nrow(hydro.data[daily.GWh.new > 0])
nrow(hydro.data[daily.GWh.new == Inf])
nrow(hydro.data[daily.GWh.new == NA])
nrow(hydro.data[is.na(daily.GWh.new),])
27522 + 26673
print(paste0("NUmber of rows that are NAs in RLDC data: ", nrow(hydro.data[is.na(daily.GWh.new),])))
print(paste0("NUmber of rows that are used from RLDC data: ", nrow(hydro.data[daily.GWh > 0,]), ", ", nrow(hydro.data[daily.GWh > 0,])/nrow(hydro.data), "% of total"))
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
## Use RLDC "new" data if it is > 0
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new]
hydro.data[daily.GWh.new > 0 & !(daily.max.new<=0), daily.max:= daily.max.new]
hydro.data[daily.GWh.new > 0 & !(daily.min.new<=0), daily.min:= daily.min.new]
num.rows.RLDC <- nrow(hydro.data[daily.GWh.new > 0,])
print(paste0("Number of rows that are NAs in RLDC data: ", nrow(hydro.data[is.na(daily.GWh.new),])))
print(paste0("Number of rows that are used from RLDC data: ", num.rows.RLDC, ", ", num.rows.RLDC/nrow(hydro.data), "% of total"))
## Use scada data if RLDC data <=0 and scada data >0
hydro.data[daily.GWh.new <= 0 & daily.GWh.scada > 0, daily.GWh:= daily.GWh.scada]
hydro.data[daily.GWh.new <= 0 & daily.GWh.scada > 0 & !(daily.max.scada <= 0), daily.max:= daily.max.scada]
hydro.data[daily.GWh.new <= 0 & daily.GWh.scada > 0 & !(daily.min.scada <= 0), daily.min:= daily.min.scada]
num.rows.scada <- nrow(hydro.data[daily.GWh.new > 0,]) - num.rows.RLDC
print(paste0("Number of rows that are used from SCADA data: ", num.rows.scada, ", ", num.rows.scada/nrow(hydro.data), "% of total"))
print(paste0("Total hydro energy from daily GWh data: ", sum(hydro.data[,daily.GWh])))
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new]
hydro.data[daily.GWh.new > 0 & !(daily.max.new<=0), daily.max:= daily.max.new]
hydro.data[daily.GWh.new > 0 & !(daily.min.new<=0), daily.min:= daily.min.new]
num.rows.RLDC <- nrow(hydro.data[daily.GWh.new > 0,])
print(paste0("Number of rows that are NAs in RLDC data: ", nrow(hydro.data[is.na(daily.GWh.new),])))
print(paste0("Number of rows that are used from RLDC data: ", num.rows.RLDC, ", ", num.rows.RLDC/nrow(hydro.data)*100, "% of total"))
## Use scada data if RLDC data <=0 and scada data >0
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0, daily.GWh:= daily.GWh.scada]
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0 & !(daily.max.scada <= 0), daily.max:= daily.max.scada]
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0 & !(daily.min.scada <= 0), daily.min:= daily.min.scada]
num.rows.scada <- nrow(hydro.data[daily.GWh.new > 0,]) - num.rows.RLDC
print(paste0("Number of rows that are used from SCADA data: ", num.rows.scada, ", ", num.rows.scada/nrow(hydro.data), "% of total"))
num.rows.RLDC
nrow(hydro.data[daily.GWh.new > 0,])
num.rows.scada <- nrow(hydro.data[daily.GWh > 0,]) - num.rows.RLDC
print(paste0("Number of rows that are used from SCADA data: ", num.rows.scada, ", ", num.rows.scada/nrow(hydro.data), "% of total"))
print(paste0("Number of rows that are used from SCADA data: ", num.rows.scada, ", ", num.rows.scada/nrow(hydro.data)*100, "% of total"))
print(paste0("Total hydro energy from daily GWh data: ", sum(hydro.data[,daily.GWh])))
sum(hydro.data[,daily.GWh.new])
sum(hydro.data[,daily.GWh.new], is.na=FALSE)
View(hydro.data)
sum(hydro.data[,daily.GWh.new], na.rm=FALSE)
sum(hydro.data[,daily.GWh], na.rm=FALSE)
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
sum(hydro.data[,daily.GWh.new], na.rm=FALSE)
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
## Use RLDC "new" data if it is > 0
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new]
hydro.data[daily.GWh.new > 0 & !(daily.max.new<=0), daily.max:= daily.max.new]
hydro.data[daily.GWh.new > 0 & !(daily.min.new<=0), daily.min:= daily.min.new]
num.rows.RLDC <- nrow(hydro.data[daily.GWh.new > 0,])
print(paste0("Number of rows that are NAs in RLDC data: ", nrow(hydro.data[is.na(daily.GWh.new),])))
print(paste0("Number of rows that are used from RLDC data: ", num.rows.RLDC, ", ", num.rows.RLDC/nrow(hydro.data)*100, "% of total"))
print(paste0("Total hydro energy from daily GWh RLDC data: ", sum(hydro.data[,daily.GWh])))
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0, daily.GWh:= daily.GWh.scada]
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0 & !(daily.max.scada <= 0), daily.max:= daily.max.scada]
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0 & !(daily.min.scada <= 0), daily.min:= daily.min.scada]
num.rows.scada <- nrow(hydro.data[daily.GWh > 0,]) - num.rows.RLDC
print(paste0("Number of rows that are used from SCADA data: ", num.rows.scada, ", ", num.rows.scada/nrow(hydro.data)*100, "% of total"))
print(paste0("Total hydro energy from daily GWh data: ", sum(hydro.data[,daily.GWh])))
nrow(hydro.data[daily.min > 0,])
print(paste0("Number of rows with non-zero daily GWh: ", nrow(hydro.data[daily.GWh,])))
print(paste0("Number of rows with non-zero daily GWh: ", nrow(hydro.data[,daily.GWh])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[,daily.min])))
nrow(hydro.data[,daily.GWh])
print(paste0("Number of rows with non-zero daily GWh: ", nrow(hydro.data[daily.GWh > 0,])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[daily.min > 0,])))
print(paste0("Number of rows with non-zero daily max: ", nrow(hydro.data[daily.max > 0,])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[daily.min > 0 & `Max Capacity` > 25,])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[daily.max > 0 & `Max Capacity` > 25,])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[daily.max > 0 & `Max Capacity` > 100,])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[daily.max > 0 & `Max Capacity` > 500,])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[daily.max > 0 & `Max Capacity` > 200,])))
nrows(hydro.data[daily.min > `Max Capacity`,])
nrow(hydro.data[daily.min > `Max Capacity`,])
test <- (hydro.data[daily.min > `Max Capacity`,])
View(test)
nrow(hydro.data)
nrow(hydro.data)/365
nrow(hydro.data[!(day %in% seq(1,12)),])
nrow(hydro.data[!(day %in% seq(1,31)),])
(266843-28)/365
gen.no.data <- nrow(hydro.data[!(day %in% seq(1,31)),])
print(paste0("Generators with no data: ", gen.no.data))
gen.no.data <- hydro.data[!(day %in% seq(1,31)),]
print(paste0("Generators with no data: ", nrow(gen.no.data)))
View(gen.no.data)
gen.no.data <- hydro.data[!(day %in% seq(1,31)),]
print(paste0("Generators with no data: ", nrow(gen.no.data), "; capacity: ", sum(gen.no.data[,`Max Capacity`]), "; ", sum(gen.no.data[,`Max Capacity`])/sum(hydro.data[,`Max Capacity`])*100, "% of total capacity"))
unique(hydro.data[,Fuel])
unique(hydro.data[,Generator.Name])
len(unique(hydro.data[,Generator.Name]))
length(unique(hydro.data[,Generator.Name]))
length(unique(generator.data[fuel %in% c("HYDRO-STORAGE", "HYDRO-PONDAGE", "HYDRO-ROR", "HYDRO-PUMPED"),Generator.Name]))
length(unique(generator.data[fuel %in% c("HYDRO-STORAGE", "HYDRO-PONDAGE", "HYDRO-ROR", "HYDRO-PUMPED"),generator]))
setnames(hydro.data, "Generator.Name", "generator")
print(paste0("Total generators in hydro.data: ", length(unique(hydro.data[,generator]))))
hydro.no.data <- hydro.data[!(day %in% seq(1,31)),]
print(paste0("Generators with no data: ", nrow(hydro.no.data), "; capacity: ", sum(hydro.no.data[,`Max Capacity`]), "; ", sum(hydro.no.data[,`Max Capacity`])/sum(hydro.data[,`Max Capacity`])*100, "% of total capacity"))
hydro.yes.data <- hydro.data[(day %in% seq(1,31)),]
print(paste0("Generators with daily generation data:" nrow(hydro.yes.data))
print(paste0("Generators with daily generation data:", nrow(hydro.yes.data))
)
print(paste0("Generators with daily generation data: ", nrow(hydro.yes.data)/365))
nrow(hydro.yes.data[is.na(daily.GWh)])
nrow(hydro.yes.data[is.na(daily.min)])
nrow(hydro.yes.data[is.na(daily.max)])
nrow(hydro.no.data[is.na(daily.min)])
nrow(hydro.no.data[is.na(day)])
print(paste0("Total hydro generators in generator.data: ", nrow(unique(generator.data[,generator]))))
print(paste0("Total hydro generators in generator.data: ", nrow(unique(generator.data.hydro[,generator]))))
generator.data.hydro <- generator.data[fuel %in% c("HYDRO-STORAGE", "HYDRO-PONDAGE", "HYDRO-ROR", "HYDRO-PUMPED"),generator] # Fetch the hydro generators from the generator data table
print(paste0("Total hydro generators in generator.data: ", nrow(unique(generator.data.hydro[,generator]))))
generator.data.hydro <- generator.data[fuel %in% c("HYDRO-STORAGE", "HYDRO-PONDAGE", "HYDRO-ROR", "HYDRO-PUMPED"),] # Fetch the hydro generators from the generator data table
print(paste0("Total hydro generators in generator.data: ", nrow(unique(generator.data.hydro[,generator]))))
View(generator.data.hydro)
nrow(unique(generator.data.hydro[,generator]))
print(paste0("Total hydro generators in generator.data: ", nrow(generator.data.hydro[,generator])))
test <- generator.data.hydro[,generator])
test <- generator.data.hydro[,generator]
print(paste0("Total hydro generators in generator.data: ", length(unique(generator.data.hydro[,generator]))))
hydro.data.test <- inner_join(hydro.yes.data, generator.data.hydro[, .SD, .SDcols=c("generator", "gen_capacity")])
View(hydro.data.test)
nrow(hydro.data.test)
nrow(hydro.yes.data)
(266815-259150)/365
sum(hydro.data.test[,capacity])/365
sum(hydro.data.test[,gen_capacity])/365
sum(hydro.yes.data[,gen_capacity])/365
sum(hydro.yes.data[,`Max Capacity`])/365
sum(hydro.data[,`Max Capacity`])/365
sum(hydro.no.data[,`Max Capacity`])
hydro.data.merged <- inner_join(hydro.yes.data, generator.data.hydro[, .SD, .SDcols=c("generator", "gen_capacity")])
print(paste0("Number of generators removed: ", (nrow(hydro.yes.data)-nrow(hydro.data.merged))/365, "; Capacity reduced: ", (sum(hydro.yes.data[,gen_capacity])-sum(hydro.yes.data[,gen_capacity]))/365, " out of ", sum(hydro.yes.data[,gen_capacity])/365, "MW"))
print(paste0("Number of generators removed: ", (nrow(hydro.yes.data)-nrow(hydro.data.merged))/365, "; Capacity reduced: ", (sum(hydro.yes.data[,`Max Capacity`])-sum(hydro.data.merged[,gen_capacity]))/365, " out of ", sum(hydro.yes.data[,`Max Capacity`])/365, "MW"))
sum(hydro.data.merged[,`Max Capacity`])
sum(hydro.data.merged[,`Max Capacity`])/365
hydro.data.not.merged <- anti_join(hydro.yes.data, generator.data.hydro[, .SD, .SDcols=c("generator", "gen_capacity")])
View(hydro.data.not.merged)
test <- unique(hydro.data.not.merged[,generator])
length(test)
test
length(hydro.data.not.merged)
nrow(hydro.data.not.merged)
nrow(hydro.data.not.merged)/365
nrow(generator.data[generator %in% test,])
test2 <- generator.data[generator %in% test,]
test2
test2 <- generator.data[generator %in% c("HYDRO-PUMPEd"),]
test2 <- generator.data[fuel %in% c("HYDRO-PUMPEd"),]
unique(generator.data[,fuel])
working.directory <- "G:/SWITCH/india_ED/india_data"
setwd(working.directory)
generator.data <- fread("generator.data.csv") # Generator data with capacity
node.data <- fread("node.data.csv") # Nodes with regions and zones
gen.fuel.data <- fread("map_generators_to_fuel.csv") # generators with fuels
gen.var.cost <- fread("map_generators_to_vom_charges.csv") # generators with variable cost
gen.ownership.raw <- fread("ownerships_posoco.csv") # generators with ownership
gen.ownership <- gen.ownership.raw[`/ BEGIN` == "Generator",]
colnames(gen.ownership) <- c("class1", "class2", "collection", "Generator", "owner_type")
fuel.type.mapping <- fread("fuel_type.csv") # fuel and type mapping table for ED algorithm
hydro.data <- fread("hydro_combo_table_daily.csv") # Hydro data with scada and RLDC daily min and max MW and daily generation
## FUNCTION ########################################################################################################
########### MOVING AVERAGE ########################################################################################
## sides says whether the mean needs to look at both sides of the value, or just one side. n is window size.
## A similar in-built function is in zoo called rollmean, but that one excludes NAs (which we want)
mav <- function(x , n=5){stats::filter(x, rep(1/n, n), sides=2)}
#################################################################################################################
## ANALYSIS ######################################################################################################
# Join generators with regions and zones
generator.data <- left_join(generator.data, node.data)
print(paste0("Number of rows with no region association: ", nrow(generator.data[is.na(Region)])))
# Join generators with fuel
generator.data <- left_join(generator.data, gen.fuel.data)
print(paste0("Number of rows with no fuel association: ", nrow(generator.data[is.na(Fuel)])))
# Join generators with variable cost
generator.data <- left_join(generator.data, gen.var.cost)
print(paste0("Number of rows with no cost data association: ", nrow(generator.data[is.na(`VO&M Charge`)])))
# Join generators with ownership
generator.data <- left_join(generator.data, gen.ownership)
print(paste0("Number of rows with no ownership association: ", nrow(generator.data[is.na(owner_type)])))
# change column names"
setnames(generator.data, c("Generator", "Node", "Max Capacity", "VO&M Charge", "Fuel", "Min Stable Level", "Region", "Zone"), c("generator", "node", "gen_capacity", "var_cost", "fuel", "min_gen", "state", "region"))
# Mapping fuel with the type of generator as treated by the ED algorithm
generator.data <- left_join(generator.data, fuel.type.mapping)
# Change the cost of hydro to zero
generator.data <- generator.data[fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE", "HYDRO-PUMPED", "HYDRO-STORAGE"), var_cost:= 0]
# Summarize variable cost by fuel and state
var_cost.mean <- generator.data %>%
group_by(fuel, state) %>%
dplyr::summarise(var_cost = mean(var_cost, na.rm=TRUE))
View(generator.data)
hydro.data[,c("daily.GWh", "daily.min", "daily.max") := 0]
## Use RLDC "new" data if it is > 0
hydro.data[daily.GWh.new > 0, daily.GWh:= daily.GWh.new]
hydro.data[daily.GWh.new > 0 & !(daily.max.new<=0), daily.max:= daily.max.new]
hydro.data[daily.GWh.new > 0 & !(daily.min.new<=0), daily.min:= daily.min.new]
num.rows.total <- nrow(hydro.data)
num.rows.RLDC <- nrow(hydro.data[daily.GWh.new > 0,])
print(paste0("Number of rows that are NAs in RLDC data: ", nrow(hydro.data[is.na(daily.GWh.new),])))
print(paste0("Number of rows that are used from RLDC data: ", num.rows.RLDC, ", ", num.rows.RLDC/num.rows.total*100, "% of total"))
print(paste0("Total hydro energy from daily GWh RLDC data: ", sum(hydro.data[,daily.GWh])))
## Use scada data if RLDC data <=0 and scada data >0
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0, daily.GWh:= daily.GWh.scada]
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0 & !(daily.max.scada <= 0), daily.max:= daily.max.scada]
hydro.data[!(daily.GWh.new > 0) & daily.GWh.scada > 0 & !(daily.min.scada <= 0), daily.min:= daily.min.scada]
num.rows.scada <- nrow(hydro.data[daily.GWh > 0,]) - num.rows.RLDC
print(paste0("Number of rows that are used from SCADA data: ", num.rows.scada, ", ", num.rows.scada/num.rows.total*100, "% of total"))
print(paste0("Total hydro energy from daily GWh data: ", sum(hydro.data[,daily.GWh])))
print(paste0("Number of rows with non-zero daily GWh: ", nrow(hydro.data[daily.GWh > 0,])))
print(paste0("Number of rows with non-zero daily min: ", nrow(hydro.data[daily.min > 0,])))
print(paste0("Number of rows with non-zero daily max: ", nrow(hydro.data[daily.max > 0,])))
## Hydro data cleaning
# Deleting generators with no daily generation data
setnames(hydro.data, "Generator.Name", "generator")
print(paste0("Total generators in hydro.data: ", length(unique(hydro.data[,generator]))))
hydro.no.data <- hydro.data[!(day %in% seq(1,31)),]
print(paste0("Generators with no data: ", nrow(hydro.no.data), "; capacity: ", sum(hydro.no.data[,`Max Capacity`]), "; ", sum(hydro.no.data[,`Max Capacity`])/sum(hydro.data[,`Max Capacity`])*100, "% of total capacity"))
hydro.yes.data <- hydro.data[(day %in% seq(1,31)),]
print(paste0("Generators with daily generation data: ", nrow(hydro.yes.data)/365))
# Intersecting the generation table with the hydro table and keeping only the intersected generators
generator.data.hydro <- generator.data[fuel %in% c("HYDRO-STORAGE", "HYDRO-PONDAGE", "HYDRO-ROR", "HYDRO-PUMPED"),] # Fetch the hydro generators from the generator data table
print(paste0("Total hydro generators in generator.data: ", length(unique(generator.data.hydro[,generator]))))
hydro.data.merged <- inner_join(hydro.yes.data, generator.data.hydro[, .SD, .SDcols=c("generator", "gen_capacity")])
hydro.data.not.merged <- anti_join(hydro.yes.data, generator.data.hydro[, .SD, .SDcols=c("generator", "gen_capacity")])
print(paste0("Number of generators removed after merging: ", (nrow(hydro.yes.data)-nrow(hydro.data.merged))/365, "; Capacity reduced: ", (sum(hydro.yes.data[,`Max Capacity`])-sum(hydro.data.merged[,gen_capacity]))/365, " out of ", sum(hydro.yes.data[,`Max Capacity`])/365, "MW"))
sum(generator.data.hydro[,gen_capacity])
generator.data.no.hydro <- generator.data[!(fuel %in% c("HYDRO-STORAGE", "HYDRO-PONDAGE", "HYDRO-ROR", "HYDRO-PUMPED")),] # non-hydro generators from the generator data table
View(generator.data.no.hydro)
generator.data.hydro.filtered <- generator.data.hydro[generator %in% unique(hydro.data.merged[,generator]),]
print(paste0("Hydro generators in generator.data: ", nrow(generator.data.hydro), " and now remaining from hydro.data: ", nrow(generator.data.hydro.filtered)))
generator.data.test <-rbind(generator.data.no.hydro, generator.data.hydro.filtered)
1265+731
View(generator.data.table)
hydro.data.merged[daily.max > gen_capacity, daily.max:= gen_capacity]
266815/365
hydro.data.merged <- hydro.data.merged[daily.max > gen_capacity, daily.max:= gen_capacity]
hydro.data.merged <- hydro.data.merged[daily.GWh > gen_capacity*24, daily.GWh:= gen_capacity*24]
hydro.data.merged <- hydro.data.merged[daily.min > gen_capacity & daily.min.scada > 0 & daily.min.scada < gen_capacity, daily.min:= daily.min.scada]
test <- copy(hydro.data.merged)
test[,date:= as.Date(paste0(day, "-", month, "-", year), format="%d-%m-%Y")]
test <- test[,date:= as.Date(paste0(day, "-", month, "-", year), format="%d-%m-%Y")]
View(test)
test <- test[,week:= as.numeric(format(date, "%U"))]
View(test)
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[,date:= as.Date(paste0(day, "-", month, "-", year), format="%d-%m-%Y")]
hydro.data.merged <- hydro.data.merged[,week:= as.numeric(format(date, "%U"))]
# Estimate weekly average min gen and total energy
hydro.data.merged <- hydro.data.merged[,daily.GWh.weekly.avg:= mean(daily.GWh), by=week]
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[,daily.GWh.weekly.avg:= mean(daily.GWh), by=.(generator,week)]
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[,daily.GWh.monthly.avg:= mean(daily.GWh), by=.(generator,month)]
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[,daily.min.weekly.avg:= mean(daily.min), by=.(generator,week)]
hydro.data.merged <- hydro.data.merged[,daily.min.monthly.avg:= mean(daily.min), by=.(generator,month)]
View(hydro.data.merged)
mav <- function(x , n=5){stats::filter(x, rep(1/n, n), sides=2)}
movAvgWindow <- 7 # weekly moving average window
hydro.data.merged[, daily.min.final:= mav(.SD, movAvgWindow), .SDcols=c(daily.min)]
hydro.data.merged[, daily.min.final:= mav(.SD, movAvgWindow), .SDcols=c("daily.min")]
hydro.data.merged <- hydro.data.merged[, daily.min.final:= mav(.SD, movAvgWindow), .SDcols=c("daily.min")]
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[, daily.GWh.final:= 0]
hydro.data.merged <- hydro.data.merged[Fuel == "HYDRO-STORAGE", daily.GWh.final:= daily.GWh.weekly.avg]
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[is.na(daily.min.final), daily.min.final:= daily.min.weekly.avg] #Convert the NAs at the beginning and end of the year to weekly averages
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[Fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE"), daily.GWh.final:= mav(.SD, movAvgWindow), .SDcols=c("daily.GWh")]
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[is.na(daily.GWh.final), daily.GWh.final:= daily.GWh.weekly.avg] #Convert the NAs at the beginning and end of the year to weekly averages
View(hydro.data.merged)
hydro.data.merged <- hydro.data.merged[Fuel == "HYDRO-PUMPED", daily.GWh.final:= daily.GWh.weekly.avg]
hydro.data.merged <- hydro.data.merged[daily.min.final*24 > daily.GWh.final, daily.min.final:= daily.GWh.final/24]
print(paste0("total hydro generation: ", sum(daily.GWh.final), "GWh"))
print(paste0("total hydro generation: ", sum(hydro.data.merged[,daily.GWh.final]), "GWh"))
sum(hydro.data.merged[,daily.GWh.new])
sum(hydro.data.merged[,daily.GWh.new])
sum(hydro.data.merged[,daily.GWh])
sum(hydro.data.merged[,daily.min])
sum(hydro.data.merged[,daily.min.final])
movAvgWindow <- 7 # weekly moving average window
hydro.data.merged <- hydro.data.merged[, daily.min.final:= mav(.SD, movAvgWindow), .SDcols=c("daily.min")]
hydro.data.merged <- hydro.data.merged[is.na(daily.min.final), daily.min.final:= daily.min.weekly.avg] #Convert the NAs at the beginning and end of the year to weekly averages
# For storage hydro, set daily energy value to weekly average energy (could use monthly average, but weekly trends are important)
hydro.data.merged <- hydro.data.merged[, daily.GWh.final:= 0]
hydro.data.merged <- hydro.data.merged[Fuel == "HYDRO-STORAGE", daily.GWh.final:= daily.GWh.weekly.avg]
# For Hydro RoR and Pondage, estimate the daily energy final using a moving average
hydro.data.merged <- hydro.data.merged[Fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE"), daily.GWh.final:= mav(.SD, movAvgWindow), .SDcols=c("daily.GWh")]
hydro.data.merged <- hydro.data.merged[is.na(daily.GWh.final), daily.GWh.final:= daily.GWh.weekly.avg] #Convert the NAs at the beginning and end of the year to weekly averages
# For pumped hydro, set daily energy value to weekly average energy (could use monthly average, but weekly trends are important)
hydro.data.merged <- hydro.data.merged[Fuel == "HYDRO-PUMPED", daily.GWh.final:= daily.GWh.weekly.avg]
# Ensure that the daily min generation throughout the day does not exceed the daily energy
hydro.data.merged <- hydro.data.merged[daily.min.final*24 > daily.GWh.final*1000, daily.min.final:= daily.GWh.final*1000/24]
# for weekly or monthly energy limits, ensure that the sum of daily min gens across week or month * 24 <= weekly energy or monthly energy.
# Need to add code for this
sum(hydro.data.merged[,daily.min])
sum(hydro.data.merged[,daily.min.final])
sum(generator.data[type=="other",gen_capacity])
nrow(generator.data[type=="other",gen_capacity])
nrow(generator.data[type=="other",])
test <- (generator.data[type=="other",])
View(test)
gen.fuel.data <- fread("map_generators_to_fuel.csv") # generators with fuels
node.data <- fread("node.data.csv") # Nodes with regions and zones
source('G:/SWITCH/india_ED/india_data/generator_input.R', echo=TRUE)
source('G:/SWITCH/india_ED/india_data/generator_input.R', echo=TRUE)
source('G:/SWITCH/india_ED/india_data/generator_input.R', echo=TRUE)
source('G:/SWITCH/india_ED/india_data/generator_input.R', echo=TRUE)
source('G:/SWITCH/india_ED/india_data/generator_input.R', echo=TRUE)
sum(generator.data.output[, gen_capacity])
sum(generator.data[, gen_capacity])
test <- dcast(hydro.max.energy, Day ~ generator, value.var = daily.GWh.final)
hydro.max.energy <- hydro.data.merged[,.SD, .SDcols = c("Day", "generator", "daily.GWh.final")]
hydro.max.energy <- hydro.data.merged[,.SD, .SDcols = c("Day", "generator", "daily.GWh.final")]
hydro.max.energy.output <- dcast(hydro.max.energy, Day ~ generator, value.var = daily.GWh.final)
View(hydro.max.energy)
hydro.max.energy.output <- dcast(hydro.max.energy, Day ~ generator, value.var = "daily.GWh.final")
View(hydro.max.energy.output)
hydro.data.merged <- hydro.data.merged[,Day:= yday(date)]
View(hydro.data.merged)
source('G:/SWITCH/india_ED/india_data/generator_input.R', echo=TRUE)
View(hydro.max.energy.output)
hydro.max.energy <- hydro.data.merged[Fuel == "HYDRO-STORAGE",.SD, .SDcols = c("Day", "generator", "daily.MWh.final")] # use capital D for Day as day of the year
View(hydro.data.merged)
source('G:/SWITCH/india_ED/india_data/generator_input.R', echo=TRUE)
View(hydro.max.energy.output)
hydro.min.gen <- hydro.min.gen[daily.min.final.CF:= daily.min.final/gen_capacity]
hydro.min.gen$daily.min.final.CF = hydro.min.gen$daily.min.final/hydro.min.gen$gen_capacity
hydro.min.gen <- hydro.data.merged[Fuel == "HYDRO-STORAGE",.SD, .SDcols = c("Day", "generator", "daily.min.final", "gen_capacity")]
hydro.min.gen$daily.min.final.CF = hydro.min.gen$daily.min.final/hydro.min.gen$gen_capacity
View(hydro.min.gen)
hydro.min.gen$daily.min.final.CF <- hydro.min.gen$daily.min.final/hydro.min.gen$gen_capacity
test1 <- hydro.min.gen$daily.min.final
test2 <- hydro.min.gen$gen_capacity
test3 <- test1/test2
class(test1)
class(test2)
test4 <- as.numeric(test1)
test3 <- test4/test2
hydro.min.gen$daily.min.final.CF <- as.numeric(hydro.min.gen$daily.min.final)/hydro.min.gen$gen_capacity
View(hydro.min.gen)
hydro.min.gen[,.N]
hydro.min.gen[,.N]/365
hydro.min.gen.output <- dcast(hydro.min.gen, Day ~ generator, value.var = "daily.min.final.CF")
View(hydro.min.gen.output)
hydro.min.gen$daily.min.final.CF <- signif(as.numeric(hydro.min.gen$daily.min.final)/hydro.min.gen$gen_capacity, 3)
hydro.min.gen.output <- dcast(hydro.min.gen, Day ~ generator, value.var = "daily.min.final.CF")
View(hydro.min.gen.output)
sum(hydro.max.energy$daily.MWh.final)
hydro.min.gen <- hydro.data.merged[Fuel == "HYDRO-STORAGE",.SD, .SDcols = c("Day", "generator", "daily.min.final", "gen_capacity")]
hydro.min.gen$daily.min.final.CF <- signif(as.numeric(hydro.min.gen$daily.min.final)/hydro.min.gen$gen_capacity, 3)
hydro.min.gen.output <- dcast(hydro.min.gen, Day ~ generator, value.var = "daily.min.final.CF")
View(hydro.min.gen.output)
hydro.max.energy <- hydro.data.merged[Fuel == "HYDRO-STORAGE",.SD, .SDcols = c("Day", "generator", "daily.MWh.final")] # use capital D for Day as day of the year
hydro.max.energy.output <- dcast(hydro.max.energy, Day ~ generator, value.var = "daily.MWh.final")
write.table(hydro.max.energy.output,file="../india_ED_input/hydro_max_energy.csv",sep=",",row.names=F)
write.table(hydro.min.gen.output,file="../india_ED_input/hydro_min_gen.csv",sep=",",row.names=F)
nuclear.generators <- generator.data[fuel == "NUCLEAR",generator]
hydro.mustrun.gen <- hydro.data.merged[Fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE"),.SD, .SDcols = c("Day", "generator", "daily.MWh.final", "gen_capacity")]
hydro.mustrun.gen$CF <- signif(hydro.mustrun.gen$daily.MWh.final/24/hydro.mustrun.gen$gen_capacity, 3) # Estimate the capacity factor of generation
hydro.mustrun.gen.output <- dcast(hydro.mustrun.gen, Day ~ generator, value.var = "CF")
mustrun.gen.output <- copy(hydro.mustrun.gen.output) # Make a seaprate copy for the must run generation output that will include nuclear generators
nuclear.outage.rate <- 0.5 # This rate will define the CFs for the must run generators. Gas and coal outages are defined in the python code for ED
mustrun.gen.output <- mustrun.gen.output[,nuclear.generators:= (1-nuclear.outage.rate)]
View(mustrun.gen.output)
mustrun.gen.output <- mustrun.gen.output[,eval(nuclear.generators):= (1-nuclear.outage.rate)]
View(mustrun.gen.output)
length(mustrun.gen.output)
length(hydro.mustrun.gen.output)
length(nuclear.generators)
View(mustrun.gen.output)
test <- mustrun.gen.output[, .SD, .SDcols = eval(nuclear.generators)]
View(test)
hydro.mustrun.gen <- hydro.data.merged[Fuel %in% c("HYDRO-ROR", "HYDRO-PONDAGE"),.SD, .SDcols = c("Day", "generator", "daily.MWh.final", "gen_capacity")]
hydro.mustrun.gen$CF <- signif(hydro.mustrun.gen$daily.MWh.final/24/hydro.mustrun.gen$gen_capacity, 3) # Estimate the capacity factor of generation
hydro.mustrun.gen.output <- dcast(hydro.mustrun.gen, Day ~ generator, value.var = "CF")
mustrun.gen.output <- copy(hydro.mustrun.gen.output) # Make a seaprate copy for the must run generation output that will include nuclear generators
nuclear.generators <- generator.data[fuel == "NUCLEAR",generator]
mustrun.gen.output <- mustrun.gen.output[,eval(nuclear.generators):= (1-nuclear.outage.rate)]
write.table(mustrun.gen.output,file="../india_ED_input/mustrun_gen.csv",sep=",",row.names=F)
load.year <- c(2022, 2030) # Set the load years
load.data <- fread("Demandhourly2014-2032-India.csv") # Load data from 2014 to 2032
working.directory <- "G:/SWITCH/india_ED/india_data"
setwd(working.directory)
load.data <- fread("Demandhourly2014-2032-India.csv") # Load data from 2014 to 2032
load.year <- c(2022, 2030) # Set the load years
test <- copy(load.data)
test[,dayOfYear := yday(dateTime)]
View(test)
for (y in load.year){
load.output <- load.data[Year == y, .SD, .SDcols = c("Interval", "India", "dateTime")]
load.output[,Day:= yday(dateTime)]
setnames(load.output, c("Interval", "India"), c("Timepoint", "load"))
write.table(load.output,file=paste0("../india_ED_input/load", y, ".csv"),sep=",",row.names=F)
}
View(load.output)
load.output[Day:= yday(dateTime)]
for (y in load.year){
load.output <- load.data[Year == y, .SD, .SDcols = c("Interval", "India", "dateTime")]
load.output$Day <- yday(load.output$dateTime)]
setnames(load.output, c("Interval", "India"), c("Timepoint", "load"))
write.table(load.output,file=paste0("../india_ED_input/load", y, ".csv"),sep=",",row.names=F)
}
y
# Load data for all specified years
for (y in load.year){
load.output <- load.data[Year == y, .SD, .SDcols = c("Interval", "India", "dateTime")]
load.output$Day <- yday(load.output$dateTime)
setnames(load.output, c("Interval", "India"), c("Timepoint", "load"))
write.table(load.output,file=paste0("../india_ED_input/load", y, ".csv"),sep=",",row.names=F)
}
