results[scenario!="S0W0", system_cost_vre_pMWh:= cost_vre_pMWh + cost_battery_pMWh - capacity_value_pMWh - energy_value_pMWh]
# Additional cost of implementing VRE per MWh load served
results[scenario!="S0W0", system_cost_add_pMWh_load:= (total_cost - total_cost_noRE)*10^6/ ann_gen_total_MWh]
# Additional overall cost % for implementing VRE compared to No RE
results[scenario!="S0W0", system_cost_add_perc:= (total_cost - total_cost_noRE)/ total_cost_noRE]
# VRE metrics #
# VRE share
results[scenario!="S0W0", vre_share_after_curt:= ann_gen_vre_MWh/ann_gen_total_MWh]
results[scenario!="S0W0", vre_curt:= (ann_gen_vre_nocurt_MWh - ann_gen_vre_MWh)/ann_gen_vre_nocurt_MWh]
results[scenario!="S0W0", vre_share_nocurt:= ann_gen_vre_nocurt_MWh/ann_gen_total_MWh]
# Emissions #
# Total emissions
results[, total_emissions_co2_milTonnes:= (ann_gen_coal_MWh * emissions[technology=="coal", co2_tonnes_mwh] +
ann_gen_gas_ccgt_MWh * emissions[technology=="ccgt", co2_tonnes_mwh] +
ann_gen_gas_ct_MWh * emissions[technology=="ct", co2_tonnes_mwh] +
ann_gen_diesel_MWh * emissions[technology=="diesel", co2_tonnes_mwh]) / 10^6]
# Grid emissions factor kg/kWh
results[, grid_emissions_factor_kg_kWh:= total_emissions_co2_milTonnes * 10^6 / ann_gen_total_MWh]
# Emissions reduction in %
total_emissions_co2_milTonnes_noRE <- results[scenario=="S0W0", total_emissions_co2_milTonnes]
results[scenario!="S0W0", total_emissions_reduced_milTonnes:= (total_emissions_co2_milTonnes_noRE - total_emissions_co2_milTonnes)]
results[scenario!="S0W0", emissions_reduction:= total_emissions_reduced_milTonnes/total_emissions_co2_milTonnes_noRE]
# Average cost of emissions mitigation
results[scenario!="S0W0", cost_emissions_reduction_pTonneCO2_avg:= system_cost_vre / total_emissions_reduced_milTonnes]
# Marginal and average cost of emissions mitigation
results.costs.emissions <- results[, .(scenario, scenario_main, scenario_sensitivity, scenario_build, scenario_split, total_cost, total_emissions_co2_milTonnes)]
results.costs.emissions <- rbind(results.costs.emissions[rep(1, 4),], results.costs.emissions) # repeat the 0-0 row, so we can use difference by group
results.costs.emissions[scenario=="S0W0", scenario_split:= unique(results.costs.emissions[scenario!="S0W0", scenario_split])]
results.costs.emissions[, system_cost_inc_marginal:= c(NA, diff(total_cost)), by=scenario_split] # System cost increase
results.costs.emissions[, system_emissions_dec_marginal:= c(NA, diff(total_emissions_co2_milTonnes))*-1, by=scenario_split] # emissions decrease from previous RE target
results.costs.emissions[, cost_emissions_reduction_pTonneCO2_marginal:= system_cost_inc_marginal / system_emissions_dec_marginal] # Marginal emissions mitigation cost
# Average cost of emissions mitigation again
results.costs.emissions[scenario!="S0W0", system_cost_inc_total:= total_cost - total_cost_noRE] # System cost increase from S0W0
results.costs.emissions[scenario!="S0W0", system_emissions_dec_total:= total_emissions_co2_milTonnes_noRE - total_emissions_co2_milTonnes] # emissions decrease from base S0W0
results.costs.emissions[scenario!="S0W0", cost_emissions_reduction_pTonneCO2_average:= system_cost_inc_total / system_emissions_dec_total] # Average emissions mitigation cost
## Cost of wind and solar uncurtailed [ Note total VRE costs in the selected scenarios are equal to either total solar or total wind costs.]
results.vre.costs <- results[scenario %in% c("S0W200", "S0W300", "S0W400"), .(scenario, total_cost_vre, ann_gen_vre_nocurt_MWh)]
results.vre.costs[, technology:= "Wind"]
results.vre.costs <- rbind(results.vre.costs, results[scenario %in% c("S0W200", "S0W300", "S0W400"), .(scenario, total_cost_vre, ann_gen_vre_nocurt_MWh)], fill=TRUE)
results.vre.costs[is.na(technology), technology:= "Solar PV"]
results.vre.costs[, Capacity:= c(200,300,400, 200, 300, 400)]
# Avoided conventional generation capacity
total_cap_new_conv_noRE <- results[scenario=="S0W0", new_capacity_coal_MW + new_capacity_gas_ccgt_MW + new_capacity_gas_ct_MW]
results[scenario!="S0W0", avoided_conv_cap_mw_perVREmw:= (total_cap_new_conv_noRE - (new_capacity_coal_MW + new_capacity_gas_ccgt_MW + new_capacity_gas_ct_MW))/capacity_vre_MW]
results.processed <- rbind(results.processed, results)
results.costs.emissions.processed <- rbind(results.costs.emissions.processed, results.costs.emissions)
head(results.processed)
cat('\n')
}
scenarios <- c("base", "coal_55mingen", "wind10LC", "wind20LC", "wind30LC", "solar10LC", "solar20LC", "solar30LC", "wind30LC_solar30LC", "wind120HH_solar1A",
"battery15", "battery30", "battery15B25LC", "battery30B25LC", "battery15B50LC", "battery30B50LC")
scenarios.sensitivity <- ""
for (sc in 1:length(scenarios)){
scenarios.sensitivity[[sc]] <- scenario.inputs[parameter == "scenario_suffix", get(scenarios[sc])]
}
theme_set(theme_cowplot(font_size=18))
colors_RD3 <- c("#fd8d3c", "#2b8cbe", "#969696")
colors_RD5 <- c("#2b8cbe", "#fd8d3c", "#969696")
colors_RD7 <- c("#5588bb", "#66bbbb", "#aa6644", "#99bb55","#ee9944", "#444466", "#bb5555")
colors_emissions_RD4 <- c("#d95f0e", "#999999", "#ca0020", "#a6611a", "#3a3938" )
width.bar = 0.7
positions <- c("S0W200", "S50W150", "S100W100", "S150W50", "S200W0", "S0W300", "S75W225", "S150W150", "S225W75", "S300W0", "S0W400", "S100W300", "S200W200", "S300W100", "S400W0")
positions2 <- c("0-100", "25-75", "50-50", "75-25", "100-0")
positions3 <- c("S0W0", "S0W200", "S50W150", "S100W100", "S150W50", "S200W0", "S0W300", "S75W225", "S150W150", "S225W75", "S300W0", "S0W400", "S100W300", "S200W200", "S300W100", "S400W0")
#positions.tech <- c("Existing Other", "Existing Nuclear", "Existing Hydro RoR", "Existing Hydro Storage", "Existing Diesel", "Existing Gas CT", "Existing Gas CCGT", "Existing Coal", "Wind", "Solar PV", "New Gas CT", "New Gas CCGT", "New Coal")
positions.tech <- c("New Coal", "New Gas CCGT", "New Gas CT", "Solar PV", "Wind", "Existing Coal", "Existing Gas CCGT", "Existing Gas CT", "Existing Diesel", "Existing Hydro Storage", "Existing Hydro RoR", "Existing Nuclear", "Existing Other")
#Labels
share.labels <- c("S 0% - W 100%", "S 25% - W 75%", "S 50% - W 50%", "S 75% - W 25%", "S 100% - W 0%", "S 0% - W 100%", "S 25% - W 75%", "S 50% - W 50%", "S 75% - W 25%", "S 100% - W 0%", "S 0% - W 100%", "S 25% - W 75%", "S 50% - W 50%", "S 75% - W 25%", "S 100% - W 0%")
share.labels2 <- c("S 0 - W 0", "S 0 - W 200", "S 50 - W 150", "S 100 - W 100", "S 150 - W 50", "S 200 - W 0", "S 0 - W 300", "S 75 - W 225", "S 150 - W 150", "S 225 - W 75", "S 300 - W 0", "S 0 - W 400", "S 100 - W 300", "S 200 - W 200", "S 300 - W 100", "S 400 - W 0")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main == scenarios[sc], .(scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_build)) +
geom_bar(stat = "identity", width = width.bar) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD3) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios
grepl(scenarios, "bat")
grep(scenarios, "bat")
grep("bat", scenarios)
grepl("bat", scenarios)
scenarios[grepl("bat", scenarios),]
scenarios[grepl("bat", scenarios)]
scenarios[grep("bat", scenarios)]
scenarios[grep("bat"|"base", scenarios)]
scenarios[grep("bat", scenarios) | grep("base", scenarios)]
scenarios[grep"bat" scenarios | grep "base" scenarios]
scenarios[grep "bat" scenarios | grep "base" scenarios]
scenarios[grep("bat | base", scenarios)]
scenarios[grep(c("bat","base"), scenarios)]
scenarios[grep("bat"|"base", scenarios)]
grep("bat"|"base", scenarios)
grep("bat"|"base", scenarios, value=TRUE)
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_build, group = senario_main)) +
geom_bar(stat = "identity", width = width.bar) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD3) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_build, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD3) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
View(data.plot)
View(data.plot)
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_build, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD3) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD3) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC", "battery30", "battery30B25LC", "battery30B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC", "battery30", "battery30B25LC", "battery30B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, group = scenario_main, color = scenario_main, linetype = scenario_main)) +
geom_line(size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC", "battery30", "battery30B25LC", "battery30B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B50LC", "battery30", "battery30B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, group = scenario_main, color = scenario_main, linetype = scenario_main)) +
geom_line(size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_line(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, color = scenario_main, linetype = scenario_main)) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_line(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, color = scenario_main, linetype = scenario_main), size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_line(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, linetype = scenario_main), size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_point(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, shape = scenario_main), size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_point(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, shape = scenario_main), size = 3) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_point(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, shape = scenario_main), size = 2) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC", "battery30", "battery30B25LC", "battery30B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B50LC", "battery30", "battery30B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, group = scenario_main, color = scenario_main, linetype = scenario_main)) +
geom_line(size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_line(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, linetype = scenario_main), size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_point(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, shape = scenario_main), size = 2) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B25LC", "battery15B50LC", "battery30", "battery30B25LC", "battery30B50LC")
scenarios.to.include <- c("base", "battery15", "battery15B50LC", "battery30", "battery30B50LC")
## System cost for VRE implementation per MWh Load served
data.plot <- results.processed[scenario!="S0W0" & scenario_main %in% scenarios.to.include, .(scenario_main, scenario, scenario_build, rank, system_cost_add_pMWh_load)]
data.plot$scenario <- reorder.factor(data.plot$scenario, new.order=positions)
# data.plot_sorted <- as.data.table(data.plot %>% arrange(scenario)) # Use if sorting screws up
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot, aes(scenario, system_cost_add_pMWh_load, group = scenario_main, color = scenario_main, linetype = scenario_main)) +
geom_line(size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_line(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, color = scenario_main), size = 1) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ggplot(data.plot[scenario_main == "base"], aes(scenario, system_cost_add_pMWh_load, fill = scenario_main, group = scenario_main)) +
geom_bar(stat = "identity", width = width.bar, position="dodge") +
geom_point(data = data.plot[scenario_main != "base"], aes(scenario, system_cost_add_pMWh_load, group = scenario_main, shape = scenario_main), size = 2) +
facet_wrap(~scenario_build, scales = "free_x") +
labs(y = "Average Additional Cost of VRE Implementation \nUSD/MWh of Load", x = NULL) +
scale_fill_manual(values = colors_RD7) +
scale_x_discrete(breaks=positions, labels=share.labels) +
theme(axis.text.x = element_text(angle=60, hjust=1, vjust=1), legend.position = "none") +
scale_y_continuous(limits = c(-5, 15), sec.axis = sec_axis(~.*INR_USD/1000, name = "INR/kWh of Load")) +
background_grid()
ln(0.5)
log(0.5)
log(.6)
exp(0.18)
0.18*0.5
load_summary_byMonth_toPlot <- melt(load_summary_byMonth, id.vars=c("month"), measure.vars=c("load", "load_mod"), variable.name="load_type", value.name="load")
## Author: Ranjit Deshmukh
## This script does the following
## 1) Reads in demand data from the Plexos formatted demand data files for India, Delhi, and Mumbai
## 2) Normalizes the data from 0 to 1
library(gdata)
library(data.table)
library(lubridate)
library(ggplot2)
library(grid)
library(reshape2)
library(xlsx)
## INPUTS TO SCRIPT ##############################################################################################
inputFolder <- "india_data/load"
## WEIGHTS
weight_india <- 0.5
weight_mumbai <- 0.25
weight_delhi <- 0.25
## END OF INPUTS ##################################################################################################
#### set working directory #######################################################################################
# working.directory
switch(Sys.info()[['sysname']],
Windows= {"G:/Electricity_Models/renewable_energy_value/"},
Linux  = {print("I'm a penguin.")},
Darwin = {working.directory <- "/Volumes/RD Ext1/Electricity_Models/renewable_energy_value/"})
## Set working directory ##
setwd(working.directory)
####################################################################################################################
source("scripts/datetimeConversionFunctions.R")
#### Input data ###
load_india_2030 <- fread("india_REV_input/load2030_19EPS.csv")
load_india_2014 <- fread("india_REV_input/load2014.csv")
load_mumbai_2014_plexos <- fread(paste0(inputFolder, "/2014_load_Mumbai.csv"))
load_delhi_2014_plexos <- fread(paste0(inputFolder, "/DemandHourly2014-Delhi.csv"))
##################
##########################################################################################################################################
#### FUNCTION TO STANDARDIZE DATA ##########
#### Data is standardized by subtracting the mean and dividing by the standard deviation
data_standardization <- function(input_data, data_column){
input_data[, paste0(data_column, "_std") := (get(data_column) - mean(get(data_column)))/sd(get(data_column))]
input_data
}
################################################################################################################################
## Add 3 days to Plexos data to match India 2030 load data
load_mumbai_2014_plexos <- add.days.to.Plexos(load_mumbai_2014_plexos, 3)
load_delhi_2014_plexos <- add.days.to.Plexos(load_delhi_2014_plexos, 3)
## Convert Plexos data to datetime single row
load_mumbai_2014 <- PlexosToYMDinterval(load_mumbai_2014_plexos, "Interval", "mumbai")
load_delhi_2014 <- PlexosToYMDinterval(load_delhi_2014_plexos, "Interval", "delhi")
# Add dateTime column
load_mumbai_2014 <- YMDIntervaltoDateTime(load_mumbai_2014, "Interval")
load_delhi_2014 <- YMDIntervaltoDateTime(load_delhi_2014, "Interval")
# Delete Year, Month, Interval and add TimePoint and day of year
load_mumbai_2014[, Timepoint := seq(1, nrow(load_mumbai_2014), 1)]
load_mumbai_2014[, Day := rep(1:(nrow(load_mumbai_2014)/24), each = 24)]
load_mumbai_2014[, c("Year", "Month", "Interval") := NULL]
load_delhi_2014[, Timepoint := seq(1, nrow(load_delhi_2014), 1)]
load_delhi_2014[, Day := rep(1:(nrow(load_delhi_2014)/24), each = 24)]
load_delhi_2014[, c("Year", "Month", "Interval") := NULL]
# Modify India load using Mumbai and Delhi loads. Peak Mumbai load is about 17.5 GW and that of Delhi is 5.8 GW
# Load will be normalized by subtracting the mean and diving by standard deviation to preserve the shape of the load curve.
# Note that normalizing by changing the scale from 0 to 1 does not preserve shape
load_india_2030 <- data_standardization(load_india_2030, "load")
load_mumbai_2014 <- data_standardization(load_mumbai_2014, "mumbai")
load_delhi_2014 <- data_standardization(load_delhi_2014, "delhi")
# Delete dataTime column from India data because it's a character, not a double. Adopt the dateTime column from mumbai data
#load_india_2030[, dateTime := NULL]
# First merge India and Mumbai
load_india_2030_mod <- merge(load_india_2030, load_mumbai_2014[, -c("Day", "dateTime")])
# Then merge India and Delhi
load_india_2030_mod <- merge(load_india_2030_mod, load_delhi_2014[, -c("Day", "dateTime")])
# Modify India load profile
load_india_2030_mod[, load_mod_std := weight_india * load_std + weight_mumbai * mumbai_std + weight_delhi * delhi_std]
load_india_2030_mod[, load_mod := load_mod_std * sd(load) + mean(load)]
# Convert character date time to actual date time format and add month
load_india_2030_mod[, dateTime := mdy_hm(dateTime)]
#load_india_2030_mod[, Month := month(dateTime)]
#load_india_2030_mod[, Year := year(dateTime)]
#load_india_2030_mod[, Hour := hour(dateTime)]
# Check if total energy consumption is the same and compare the peak load
print(paste0("Original total energy consumption is ", as.integer(sum(load_india_2030_mod[, load]/10^6)), " TWh"))
print(paste0("New total energy consumption is ", as.integer(sum(load_india_2030_mod[, load_mod]/10^6)), " TWh"))
print(paste0("Original peak load is ", as.integer(max(load_india_2030_mod[, load]/10^3)), " GW"))
print(paste0("New peak load is ", as.integer(max(load_india_2030_mod[, load_mod]/10^3)), " GW"))
# Load by month and load by hour summary
load_summary_byMonth <- load_india_2030_mod[Day <= 365, lapply(.SD, sum), by = .(month(dateTime)), .SDcols = c("load", "load_mod")]
load_summary_byHour <- load_india_2030_mod[Day <= 365, lapply(.SD, sum), by = .(hour(dateTime)), .SDcols = c("load", "load_mod")]
load_summary_byMonth_toPlot <- melt(load_summary_byMonth, id.vars=c("month"), measure.vars=c("load", "load_mod"), variable.name="load_type", value.name="load")
View(load_summary_byMonth_toPlot)
ggplot(load_summary_byMonth, aes(x = month, y = load/10^6), fill=load_type) +
geom_bar(stat="identity", position="dodge")
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load/10^6), fill=load_type) +
geom_bar(stat="identity", position="dodge")
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load/10^6), fill=load_type) +
geom_bar(stat="identity", position=position_dodge())
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load/10^6), fill=load_type) +
geom_bar(stat="identity", position="stack")
typeof(load_summary_byMonth[, load])
typeof(load_summary_byMonth[, load_mod])
typeof(load_summary_byMonth_toPlot[, load])
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load), fill=load_type) +
geom_bar(stat="identity", position="dodge")
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load, fill=load_type)) +
geom_bar(stat="identity", position="dodge")
View(load_summary_byHour)
load_summary_byHour_toPlot <- melt(load_summary_byHour, id.vars=c("hour"), measure.vars=c("load", "load_mod"), variable.name="load_type", value.name="load")
ggplot(load_summary_byHour_toPlot, aes(x = hour, y = load, fill=load_type)) + geom_bar(stat="identity", position="dodge")
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load, fill=load_type)) +
geom_bar(stat="identity", position="dodge") + scale_fill_manual(values=c("#999999", "#E69F00"))
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load/10^6, fill=load_type)) +
geom_bar(stat="identity", position="dodge") + scale_fill_manual(values=c("#999999", "#E69F00"))
ggplot(load_summary_byMonth_toPlot, aes(x = month, y = load/10^6, fill=load_type)) +
geom_bar(stat="identity", position="dodge") + scale_fill_manual(values=c("#999999", "#E69F00"))
